{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfPractice1931"
		},
		"adfblobstorageDiljot_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'adfblobstorageDiljot'"
		},
		"diljotSQL_DB_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'diljotSQL_DB'"
		},
		"diljotSQL_DW_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'diljotSQL_DW'"
		},
		"diljotSQL_DB_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "diljotsqlserver1931.database.windows.net"
		},
		"diljotSQL_DB_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "diljotSQL_DB"
		},
		"diljotSQL_DB_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "diljotadmin"
		},
		"diljotSQL_DW_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "diljotsqlserver1931.database.windows.net"
		},
		"diljotSQL_DW_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "diljotSQL_DW"
		},
		"diljotSQL_DW_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "diljotadmin"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/adfblobstorageDiljot')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('adfblobstorageDiljot_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/diljotSQL_DB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('diljotSQL_DB_properties_typeProperties_server')]",
					"database": "[parameters('diljotSQL_DB_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('diljotSQL_DB_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('diljotSQL_DB_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/diljotSQL_DW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('diljotSQL_DW_properties_typeProperties_server')]",
					"database": "[parameters('diljotSQL_DW_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('diljotSQL_DW_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('diljotSQL_DW_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BulkCopyFiles_toBlob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfblobstorageDiljot",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"container": "bulk-copy-files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfblobstorageDiljot')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BulkCopyFiles_toSQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfblobstorageDiljot",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "bulk-copy-files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Model",
						"type": "String"
					},
					{
						"name": "Length",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfblobstorageDiljot')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BulkCopySQLTables_toBlob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "diljotSQL_DB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaName": {
						"type": "string"
					},
					"tableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/diljotSQL_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerDataDW_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfblobstorageDiljot",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customerDataDW_csv",
						"container": "bulk-copy-files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerKey",
						"type": "String"
					},
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "AddressLine1",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "PostalCode",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfblobstorageDiljot')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TablesList')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "diljotSQL_DB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/diljotSQL_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/carsData_SQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "diljotSQL_DB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "Model",
						"type": "varchar"
					},
					{
						"name": "Length",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Cars"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/diljotSQL_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/carsData_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adfblobstorageDiljot",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dbo_Cars.csv",
						"container": "bulk-copy-files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Model",
						"type": "String"
					},
					{
						"name": "Length",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adfblobstorageDiljot')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customerData_SQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "diljotSQL_DW",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "Gender",
						"type": "char"
					},
					{
						"name": "Email",
						"type": "nvarchar"
					},
					{
						"name": "AddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "State",
						"type": "nvarchar"
					},
					{
						"name": "PostalCode",
						"type": "nvarchar"
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "IsCurrent",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimCustomer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/diljotSQL_DW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BulkCopy_Blob_to_SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BulkCopyFiles_toSQL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems",
								"itemName"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Truncate Table SP",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "BulkCopyFiles_toBlob",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BulkCopySQLTables_toBlob",
											"type": "DatasetReference",
											"parameters": {
												"schemaName": {
													"value": "@split(replace(item().name,'.csv' ,''), '_')[0]\n\n",
													"type": "Expression"
												},
												"tableName": {
													"value": "@split(replace(item().name,'.csv' ,''), '_')[1]",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Truncate Table SP",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[Truncate_table]",
										"storedProcedureParameters": {
											"schemaName": {
												"value": {
													"value": "@split(replace(item().name,'.csv' ,''), '_')[0]",
													"type": "Expression"
												},
												"type": "String"
											},
											"tableName": {
												"value": {
													"value": "@split(replace(item().name,'.csv' ,''), '_')[1]",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "diljotSQL_DB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BulkCopyFiles_toSQL')]",
				"[concat(variables('factoryId'), '/datasets/BulkCopyFiles_toBlob')]",
				"[concat(variables('factoryId'), '/datasets/BulkCopySQLTables_toBlob')]",
				"[concat(variables('factoryId'), '/linkedServices/diljotSQL_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BulkCopy_SQL_to_Blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * \nfrom diljotSQL_DB.INFORMATION_SCHEMA.TABLES\nWHERE TABLE_TYPE = 'BASE TABLE'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "TablesList",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "BulkCopySQLTables_toBlob",
											"type": "DatasetReference",
											"parameters": {
												"schemaName": {
													"value": "@item().table_schema",
													"type": "Expression"
												},
												"tableName": {
													"value": "@item().table_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BulkCopyFiles_toBlob",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@concat(item().table_schema,'_',item().table_name,'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-05T02:28:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TablesList')]",
				"[concat(variables('factoryId'), '/datasets/BulkCopySQLTables_toBlob')]",
				"[concat(variables('factoryId'), '/datasets/BulkCopyFiles_toBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "customerData_SQL",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CustomerDataDW_csv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerKey as integer,",
						"          CustomerID as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Gender as string,",
						"          Email as string,",
						"          AddressLine1 as string,",
						"          City as string,",
						"          State as string,",
						"          PostalCode as string,",
						"          Country as string,",
						"          IsCurrent as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 select(mapColumn(",
						"          CustomerKey,",
						"          CustomerID,",
						"          FirstName,",
						"          LastName,",
						"          Gender,",
						"          Email,",
						"          AddressLine1,",
						"          City,",
						"          State,",
						"          PostalCode,",
						"          Country",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerKey as string,",
						"          CustomerID as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Gender as string,",
						"          Email as string,",
						"          AddressLine1 as string,",
						"          City as string,",
						"          State as string,",
						"          PostalCode as string,",
						"          Country as string",
						"     ),",
						"     partitionFileNames:['customerDataDW_csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          CustomerKey,",
						"          CustomerID,",
						"          FirstName,",
						"          LastName,",
						"          Gender,",
						"          Email,",
						"          AddressLine1,",
						"          City,",
						"          State,",
						"          PostalCode,",
						"          Country",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/customerData_SQL')]",
				"[concat(variables('factoryId'), '/datasets/CustomerDataDW_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scd1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "carsData_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "carsData_SQL",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as integer,",
						"          Name as string,",
						"          Model as string,",
						"          Length as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 alterRow(upsertIf(0==0)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Name as string,",
						"          Model as string,",
						"          Length as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['Name'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Name,",
						"          Model,",
						"          Length",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/carsData_csv')]",
				"[concat(variables('factoryId'), '/datasets/carsData_SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scd2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CustomerDataDW_csv",
								"type": "DatasetReference"
							},
							"name": "CustomerCSV"
						},
						{
							"dataset": {
								"referenceName": "customerData_SQL",
								"type": "DatasetReference"
							},
							"name": "CustomerLookup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "customerData_SQL",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "customerData_SQL",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "customerData_SQL",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "CSVvsLookup"
						},
						{
							"name": "split1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerKey as integer,",
						"          CustomerID as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Gender as string,",
						"          Email as string,",
						"          AddressLine1 as string,",
						"          City as string,",
						"          State as string,",
						"          PostalCode as string,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CustomerCSV",
						"source(output(",
						"          CustomerKey as integer,",
						"          CustomerID as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Gender as string,",
						"          Email as string,",
						"          AddressLine1 as string,",
						"          City as string,",
						"          State as string,",
						"          PostalCode as string,",
						"          Country as string,",
						"          IsCurrent as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> CustomerLookup",
						"CustomerLookup select(mapColumn(",
						"          CustomerKey_lookup = CustomerKey,",
						"          CustomerID_lookup = CustomerID,",
						"          FirstName_lookup = FirstName,",
						"          LastName_lookup = LastName,",
						"          Gender_lookup = Gender,",
						"          Email_lookup = Email,",
						"          AddressLine1_lookup = AddressLine1,",
						"          City_lookup = City,",
						"          State_lookup = State,",
						"          PostalCode_lookup = PostalCode,",
						"          Country_lookup = Country,",
						"          IsCurrent_lookup = IsCurrent",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"CustomerCSV, select1 lookup(CustomerKey == CustomerKey_lookup,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> CSVvsLookup",
						"CSVvsLookup split(isNull(CustomerKey_lookup),",
						"     !isNull(CustomerKey_lookup) && ((CustomerID_lookup != CustomerID) || (FirstName_lookup != FirstName) || (LastName_lookup !=LastName) || (Gender_lookup != Gender) \r",
						"|| (Email_lookup != Email) || (AddressLine1_lookup != AddressLine1) || (City_lookup != City) || (State_lookup != State) || (PostalCode_lookup != PostalCode) || (Country_lookup != Country)),",
						"     disjoint: false) ~> split1@(RecordExistNo, RecordExists, random)",
						"split1@RecordExistNo derive(isCurrent_new = 1) ~> derivedColumn1",
						"split1@RecordExists select(mapColumn(",
						"          CustomerKey,",
						"          CustomerID,",
						"          FirstName,",
						"          LastName,",
						"          Gender,",
						"          Email,",
						"          AddressLine1,",
						"          City,",
						"          State,",
						"          PostalCode,",
						"          Country,",
						"          CustomerKey_lookup,",
						"          CustomerID_lookup,",
						"          FirstName_lookup,",
						"          LastName_lookup,",
						"          Gender_lookup,",
						"          Email_lookup,",
						"          AddressLine1_lookup,",
						"          City_lookup,",
						"          State_lookup,",
						"          PostalCode_lookup,",
						"          Country_lookup,",
						"          IsCurrent_lookup",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"derivedColumn3 derive(IsCurrent_lookup = 0) ~> derivedColumn2",
						"select2 derive(isCurrent_new = 1) ~> derivedColumn3",
						"derivedColumn2 alterRow(updateIf(1==1)) ~> alterRow1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerKey as integer,",
						"          CustomerID as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Gender as string,",
						"          Email as string,",
						"          AddressLine1 as string,",
						"          City as string,",
						"          State as string,",
						"          PostalCode as string,",
						"          Country as string,",
						"          IsCurrent as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerKey,",
						"          CustomerID,",
						"          FirstName,",
						"          LastName,",
						"          Gender,",
						"          Email,",
						"          AddressLine1,",
						"          City,",
						"          State,",
						"          PostalCode,",
						"          Country,",
						"          IsCurrent = isCurrent_new",
						"     )) ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerKey as integer,",
						"          CustomerID as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Gender as string,",
						"          Email as string,",
						"          AddressLine1 as string,",
						"          City as string,",
						"          State as string,",
						"          PostalCode as string,",
						"          Country as string,",
						"          IsCurrent as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerKey,",
						"          CustomerID,",
						"          FirstName,",
						"          LastName,",
						"          Gender,",
						"          Email,",
						"          AddressLine1,",
						"          City,",
						"          State,",
						"          PostalCode,",
						"          Country,",
						"          IsCurrent = isCurrent_new",
						"     )) ~> sink2",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerKey as integer,",
						"          CustomerID as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Gender as string,",
						"          Email as string,",
						"          AddressLine1 as string,",
						"          City as string,",
						"          State as string,",
						"          PostalCode as string,",
						"          Country as string,",
						"          IsCurrent as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['CustomerKey','CustomerID','FirstName','LastName','Gender','Email','AddressLine1','City'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerKey,",
						"          CustomerID,",
						"          FirstName,",
						"          LastName,",
						"          Gender,",
						"          Email,",
						"          AddressLine1,",
						"          City,",
						"          State,",
						"          PostalCode,",
						"          Country,",
						"          IsCurrent = IsCurrent_lookup",
						"     )) ~> sink3"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CustomerDataDW_csv')]",
				"[concat(variables('factoryId'), '/datasets/customerData_SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SendEmail_after_BulkCopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "BulkCopy_toBlob",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BulkCopy_SQL_to_Blob",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Send Success Email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "BulkCopy_toBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-16.westus2.logic.azure.com:443/workflows/16381019ba95471991159e16fa59c80b/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=8-c28tovtwwilo3knSI4SmDDpHqxJFXRQs3WcMdQra8",
							"body": {
								"value": "{\n    \"title\": \"@{pipeline().Pipeline} SUCCEEDED!\",\n    \"message\": \"The Pipeline has been successfully executed\",\n    \"color\": \"Green\",\n    \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"pipelineName\": \"@{pipeline().Pipeline}\",\n    \"pipelineRunId\": \"@{pipeline().RunId}\",\n    \"time\": \"@{utcNow()}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send Failed Email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "BulkCopy_toBlob",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-16.westus2.logic.azure.com:443/workflows/16381019ba95471991159e16fa59c80b/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=8-c28tovtwwilo3knSI4SmDDpHqxJFXRQs3WcMdQra8",
							"body": {
								"value": "{\n    \"title\": \"@{pipeline().Pipeline} FAILED!\",\n    \"message\": \"@{activity('BulkCopy_toBlob').error.message}\",\n    \"color\": \"Red\",\n    \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"pipelineName\": \"@{pipeline().Pipeline}\",\n    \"pipelineRunId\": \"@{pipeline().RunId}\",\n    \"time\": \"@{utcNow()}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/BulkCopy_SQL_to_Blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scd1_dataFlow_exec')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "scd1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "scd1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/scd1')]"
			]
		}
	]
}