{
	"name": "scd2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CustomerDataDW_csv",
						"type": "DatasetReference"
					},
					"name": "CustomerCSV"
				},
				{
					"dataset": {
						"referenceName": "customerData_SQL",
						"type": "DatasetReference"
					},
					"name": "CustomerLookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "customerData_SQL",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "customerData_SQL",
						"type": "DatasetReference"
					},
					"name": "UpdateOldSink"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "CSVvsLookup"
				},
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "UpdateOld"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "derivedColumn2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerKey as integer,",
				"          CustomerID as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Gender as string,",
				"          Email as string,",
				"          AddressLine1 as string,",
				"          City as string,",
				"          State as string,",
				"          PostalCode as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CustomerCSV",
				"source(output(",
				"          CustomerKey as integer,",
				"          CustomerID as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Gender as string,",
				"          Email as string,",
				"          AddressLine1 as string,",
				"          City as string,",
				"          State as string,",
				"          PostalCode as string,",
				"          Country as string,",
				"          IsCurrent as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> CustomerLookup",
				"CustomerLookup select(mapColumn(",
				"          CustomerKey_lookup = CustomerKey,",
				"          CustomerID_lookup = CustomerID,",
				"          FirstName_lookup = FirstName,",
				"          LastName_lookup = LastName,",
				"          Gender_lookup = Gender,",
				"          Email_lookup = Email,",
				"          AddressLine1_lookup = AddressLine1,",
				"          City_lookup = City,",
				"          State_lookup = State,",
				"          PostalCode_lookup = PostalCode,",
				"          Country_lookup = Country,",
				"          IsCurrent_lookup = IsCurrent",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"CustomerCSV, select1 lookup(CustomerKey == CustomerKey_lookup,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> CSVvsLookup",
				"CSVvsLookup split(isNull(CustomerKey_lookup),",
				"     !isNull(CustomerKey_lookup) && ((CustomerID_lookup != CustomerID) || (FirstName_lookup != FirstName) || (LastName_lookup !=LastName) || (Gender_lookup != Gender) \r",
				"|| (Email_lookup != Email) || (AddressLine1_lookup != AddressLine1) || (City_lookup != City) || (State_lookup != State) || (PostalCode_lookup != PostalCode) || (Country_lookup != Country)),",
				"     disjoint: false) ~> split1@(RecordExistNo, RecordExists, random)",
				"split1@RecordExistNo derive(isCurrent_new = 1) ~> derivedColumn1",
				"split1@RecordExists select(mapColumn(",
				"          CustomerKey_lookup,",
				"          CustomerID_lookup,",
				"          FirstName_lookup,",
				"          LastName_lookup,",
				"          Gender_lookup,",
				"          Email_lookup,",
				"          AddressLine1_lookup,",
				"          City_lookup,",
				"          State_lookup,",
				"          PostalCode_lookup,",
				"          Country_lookup,",
				"          IsCurrent_lookup",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> UpdateOld",
				"derivedColumn2 alterRow(updateIf(1==1)) ~> alterRow1",
				"UpdateOld derive(IsCurrent_lookup = 0) ~> derivedColumn2",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CustomerKey as integer,",
				"          CustomerID as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Gender as string,",
				"          Email as string,",
				"          AddressLine1 as string,",
				"          City as string,",
				"          State as string,",
				"          PostalCode as string,",
				"          Country as string,",
				"          IsCurrent as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CustomerKey,",
				"          CustomerID,",
				"          FirstName,",
				"          LastName,",
				"          Gender,",
				"          Email,",
				"          AddressLine1,",
				"          City,",
				"          State,",
				"          PostalCode,",
				"          Country,",
				"          IsCurrent = isCurrent_new",
				"     )) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CustomerKey as integer,",
				"          CustomerID as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Gender as string,",
				"          Email as string,",
				"          AddressLine1 as string,",
				"          City as string,",
				"          State as string,",
				"          PostalCode as string,",
				"          Country as string,",
				"          IsCurrent as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['CustomerKey','CustomerID','FirstName_lookup','LastName_lookup','Gender_lookup','Email_lookup','AddressLine1_lookup','City_lookup','State_lookup','PostalCode_lookup','Country_lookup'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CustomerKey = CustomerKey_lookup,",
				"          FirstName = FirstName_lookup,",
				"          LastName = LastName_lookup,",
				"          Gender = Gender_lookup,",
				"          Email = Email_lookup,",
				"          AddressLine1 = AddressLine1_lookup,",
				"          City = City_lookup,",
				"          State = State_lookup,",
				"          PostalCode = PostalCode_lookup,",
				"          Country = Country_lookup,",
				"          IsCurrent = IsCurrent_lookup,",
				"          CustomerID = CustomerID_lookup",
				"     )) ~> UpdateOldSink"
			]
		}
	}
}